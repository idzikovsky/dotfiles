#!/usr/bin/env python3

from http.cookiejar import LWPCookieJar
import logging
import pprint
import requests
import sys

log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
stdout_handler = logging.StreamHandler(sys.stdout)
stdout_handler.setLevel(logging.DEBUG)
log.addHandler(stdout_handler)

URL = "https://eu-wap.tplinkcloud.com"
TOKEN_FILE = "/var/lib/speakerctl.token"
COOKIE_FILE = "/var/lib/speakerctl.cookie"
DEFAULT_DEVICE = "speakers"

def mksession(f):
    def wrapper(*args, **kwargs):
        jar = LWPCookieJar(COOKIE_FILE)
        try:
            jar.load()
        except FileNotFoundError:
            pass
        except Exception as e:
            log.debug(e)
            raise
        session = requests.Session()
        session.cookies = jar
        res = f(session, *args, **kwargs)
        jar.save(ignore_discard=True)
        return res
    return wrapper

@mksession
def login(session):
    import getpass
    email = input("Enter E-Mail: ")
    password = getpass.getpass("Enter password: ")

    resp = session.post(URL,
        json={
            "method": "login",
            "params": {
                "appType": "Kasa_Android",
                "cloudUserName": email,
                "cloudPassword": password,
                "terminalUUID": "MY_UUID_v4",
            },
        }
    )

    try:
        token = resp.json()["result"]["token"]
    except KeyError as e:
        log.debug(e)
        log.debug(pprint.pformat(resp.json()))
        raise

    with open("/var/lib/speakerctl.token", "w") as token_file:
        token_file.write(token)

@mksession
def set_state(session, state="off", device=DEFAULT_DEVICE):
    if state == "on":
        state_num = 1
    else:
        state_num = 0

    with open(TOKEN_FILE, "r") as token_file:
        token = token_file.read()

    resp = session.post(URL,
        params={"token": token},
        json={"method": "getDeviceList"}
    )
    log.debug(pprint.pformat(resp.json()))

    devices = resp.json()["result"]["deviceList"]

    speakers = next((d for d in devices if d["alias"] == device), None)

    device_URL = speakers.get("appServerUrl", URL)

    resp = session.post(device_URL,
        params={"token": token},
        json={
            "method": "passthrough",
            "params": {
                "deviceId": speakers["deviceId"],
                "requestData": "{\"system\":{\"set_relay_state\":{\"state\":" + str(state_num) + "}}}",
            },
        }
    )
    log.debug(pprint.pformat(resp.json()))


if __name__ == "__main__":
    try:
        device = sys.argv[2]
    except IndexError:
        device = DEFAULT_DEVICE

    if sys.argv[1] == "login":
        login()
    elif sys.argv[1] == "on":
        set_state("on", device)
    else:
        set_state("off", device)
